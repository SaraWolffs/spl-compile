SPL = Decl+
Decl = 
    'var' VarInit
  | NonIdType VarInit         {peek in {'Int','Bool','Char','(','['}}
  | id FunOrNamedTypeVarDecl
FunOrNamedTypeVarDecl = 
   FunDef                     {peek in {'('}}
 | VarInit                    {peek in {id} }
VarInit = id '=' Exp ';'
FunDef = Tuplish_id [ '::' FunType ] Compound
FunType = Typ* '->' Typ
Typ  = NonIdType              {peek in {'Int','Bool','Char','Void','(','['}}
     | id
NonIdType = BType | Tuplish_Type | '[' Typ ']'
BType = 'Int' | 'Bool' | 'Char' | 'Void'
Stmt = 'if' '(' Exp ')' Compound [ 'else' Compound ]
 | 'while '(' Exp ')' Compound
 | id AssignInitOrCall
 | 'var' VarInit
 | NonIdType VarInit          {peek in {'Int','Bool','Char','Void','(','['}}
 | 'return' [ Exp ] ';'
AssignInitOrCall = 
   Field '=' Exp ';'          {peek in {'.','='}}
 | Tuplish_Exp ';'            {peek in {'('}}
 | VarInit                    {peek in {id}}
Compound = '{' Stmt* '}'
Selector = '.' ('hd' | 'tl' | 'fst' | 'snd')
Field = Selector*
Exp = Arith_top
Atom = id FieldOrCall
 | int | char | 'False' | 'True' | '[]'
 | Tuplish_Exp                {peek in {'('}}
FieldOrCall = Field           {peek in <otherwise> }
            | Tuplish_Exp     {peek in {'('}}
Tuplish_a = '(' [ a ( ',' a )* ] ')'



FORALL n in {1..top}: // MEMO: parse this by shunting yard.
Arith_n = 
    | Arith_{n-1} Opr_n Arith_n
    | Arith_n Opl_n Arith_{n-1}
    | Op1_n Arith_n
    | Arith_{n-1}
Opl_n = Opl WITH prio(Opl) == n
Opr_n = Opr WITH prio(Opr) == n
Op1_n = Op1 WITH prio(Op1) == n
Opl = '+' | '-' | '*' | '%'
| '==' | '<' | '>' | '<=' | '>=' | '!='
| '&&' | '||'
Opr = ':'
Op1 = '!' | '-'

Arith_0 = Atom

/***************   TOKENS    ****************/
int = digit+
id = alpha ( '_' | alphanumeric )*
char = "'" any
keys:
'var' 'Void' 'Int' 'Bool' 'Char' 'if' 'else' 'while' 'return' 'hd' 'tl' 'fst'
'snd' 'False' 'True' 
';' '(' ')' '{' '}' ']' ',' '.' 
'&&' '||' '+' '%' 
'<': '<='
'>': '>='
'!': '!='
'=': '=='
'[': '[]'
':': '::'
'-': '->'
'*': '*/'
'//' '/*' // Special case: strip in preprocessing


/*************** ADJUSTMENTS ****************/

// Typ // renamed from Type to avoid keyword conflicts in implementation
// On top of the below (from grammar.txt), extensive left-factoring, and removal
// of rules so made redundant.
// Fused FStmt to decrease lookahead (unfuse in semantic analysis)
// Removed negative integer constants, fix in constant folding.

// Op2 = '+' | '-' | '*' | '%'
   | '==' | '<' | '>' | '<=' | '>=' | '!='
   | '&&' | '||'
   | ':' // Replaced by Opl_n, Opr_n, and Op1_n
// ActArgs = Exp [ ',' ActArgs ] // regularized
// Exp = ... // Completely rewritten as Arith_n and Atom
// qualid = id ('.' Selector)* // added, factored out of Stmt, Atom.
// Field = [ Field ( '.' 'hd' | '.' 'tl' | '.' 'fst' | '.' 'snd' ) ] 
// left factored, regularized, factored out Selector, inlined.
// Selector = 'hd' | 'tl' | 'fst' | 'snd' // Added
// Compound = '{' Stmt* '}' // added, factored out of Stmt
// FunType = [ FTypes ] '->' RetType // regularized and inlined
// FTypes = Type [ FTypes ] // replaced by Type* in FunType
// FArgs = (id ',') FArgs // removed left recursion, then regularized.
// Added VarDecl to Stmt to simplify function bodies
// Made empty function bodies legal (meaning "Void noop"), making them coincide
// compound statements, resulting in
// FunDecl = id '(' [ FArgs ] ')' [ '::' FunType ] Compound

/***************   ERRATA   ****************/
int = digit+
// greedy lexing would incorrectly lex 5-6 as two ints otherwise. The parser can
// undo this in the expression parser.
